LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

entity IM is
	port(
				clk: in std_logic;
				en: in std_logic; --0 for disable, 1 for enable
				MEM: in std_logic_vector(1 downto 0); --11 for write, others for read
				RamAddr : buffer  STD_LOGIC_VECTOR (17 downto 0);
        RamData : inout  STD_LOGIC_VECTOR (15 downto 0);
				RamOE : out  STD_LOGIC;
				RamWE : out  STD_LOGIC;
				RamEN : out  STD_LOGIC;
				PC:in std_logic_vector(17 downto 0);
				INS:out std_logic_vector(15 downto 0);
				Address:in std_logic_vector(17 downto 0);
				Data:in std_logic_vector(15 downto 0);
				UIns:out std_logic_vector(15 downto 0);
				
				DYP:out std_logic_vector(6 downto 0)
			);
end entity;
	
architecture Behavioral of IM is
	type state is (Start, Read, ReadUI, Write, Start2);
	signal cur_state, next_state: state:= Start;
	signal Address_low, Address_high: std_logic_vector(17 downto 0):= (others => '0');
begin
	process (en, clk)
	begin
		if (en = '0') then
			cur_state <= Start;
		elsif (clk'event and clk='1') then
			cur_state <= next_state;
		end if;
	end process;
	
	process (cur_state)
	begin
		case cur_state is
			when Start =>
				RamWE <= '1';
				RamOE <= '1';
				RamEN <= '0';
				if (CONV_INTEGER(Address) > 16383 and CONV_INTEGER(Address) < 32768) then
					case MEM is
						when "11" =>
							RamData <= Data;
							RamAddr <= Address;
							next_state <= Write;
						when "10" =>
							RamData <= (others => 'Z');
							RamAddr <= Address;
							next_state <= ReadUI;
						when others =>
							RamData <= (others => 'Z');
							RamAddr <= PC;
							next_state <= Read;
					end case;
				else
					RamData <= (others => 'Z');
					RamAddr <= PC;
					next_state <= Read;
				end if;
			when Read =>
				RamWE <= '1';
				RamEN <= '0';
				next_state <= Start;
				RamData <= (others => 'Z');
				RamAddr <= PC;
				INS <= RamData;
				RamOE <= '0';
			when ReadUI =>
				RamWE <= '1';
				RamEN <= '0';
				next_state <= Start2;
				RamData <= (others => 'Z');
				RamAddr <= Address;
				UIns <= RamData;
				RamOE <= '0';
			when Write => 
				RamWE <= '0';
				RamEN <= '0';
				next_state <= Start2;
				RamAddr <= Address;
				RamData <= Data;
				RamOE <= '1';
			when Start2 => 
				RamWE <= '1';
				RamOE <= '1';
				RamEN <= '0';
				RamData <= (others => 'Z');
				RamAddr <= PC;
				next_state <= Read;
			when others =>
				next_state <= Start;
		end case;
	end process;

	process (cur_state)
	begin
		case cur_state is
			when Start => DYP <= "0000001";
			when Start2 => DYP <= "0000011";
			when Read => DYP <= "0000111";
			when Write => DYP <= "1110000";
			when others => DYP <= "1111111";
		end case;
	end process;

end architecture;